/*
* Helper for 'build.rs':es.
*
* Processes the 'pins.toml', producing a Rust snippet to be included in examples.
*
* Notes:
*   - favor scoped 'use' statements over root-level uses. The snippet is read verbatim to its place
*     of include, so any packages used here become available in the parent file.
*
* Design decisions:
*   - keeping away from OS commands and file system access. It's more explicit when the caller does it.
*/
use anyhow::{Context, Result};
use std::collections::HashMap;

// TOML objects
//
#[derive(Debug, serde::Deserialize)]
struct PinsToml {
    boards: HashMap<String, HashMap<String,Board>>
}

#[derive(Debug, serde::Deserialize)]
#[allow(non_snake_case)]
struct Board {
    BOOT: u32,
}

#[allow(non_snake_case)]
fn process_pins(toml: &str, board_id: &str) -> Result<String> {
    let c: PinsToml = toml::from_str(toml)?;

    let board = c.boards.get(board_id).with_context(
        || format!("No section '[boards.{board_id}]' found in 'pins.toml'")
    )?;

    // unpack, because "field access not supported [...] in a format string"
    let Board { BOOT } = board;

    let ret = {
        format!(r#"// Generated by 'build.rs'
// DO NOT MAKE CHANGES HERE; THEY WILL GET LOST. Instead, edit 'pins.toml' and rebuild.
//
macro_rules! pins {{
    ($peripherals:ident) => {{{{
        // {board_id}
        Pins {{
            BOOT: $peripherals.GPIO{BOOT}.into()
        }}
    }}}}
}}
"#)
    };

    Ok(ret)
}
