#
# This Makefile is only for help - a wrapper around 'cargo build' to shorten the commands.
#
# Usage:
#	$ [DEFMT_LOG=trace|debug|info|...] make -f Makefile.dev {abc|...}
#
DEFMT_LOG?=esp_hal=info,debug
	#ble_custom=debug		# did not work; why? (no 'info' level output)
FEATURES?=

LOG_ENV:=DEFMT_LOG=$(DEFMT_LOG)

DEFMT_HOST_FMT:='{t:dimmed} [{L:bold}] {s}'

REMAKE:=$(MAKE) -f $(MAKEFILE_LIST)

# Detect 'cargo' build cache
#
# 'cargo' stores output in a 'target' dir. We get its path via ’build.rs’ to ’.OUT_DIR’. [1]
#
#	[1]: Cargo Book > Build cache
#		https://doc.rust-lang.org/stable/cargo/guide/build-cache.html
#
_OUT_DIR:=.OUT_DIR

# Note! Defined with '=' so that it gets re-evaluated each time. This way, the build
#		(that generates '.OUT_DIR') has a chance of running first.
#
_OUT_EXAMPLE=$(shell cat ${_OUT_DIR} | sed -E 's^/build/.+$$^/examples/^')$(EXAMPLE)

all:
	@false

custom:
	EXAMPLE=custom-emb \
	  $(REMAKE) --no-print-directory _build _run

# Expand the '#[gatt...]' macros
#
# Before using this:
#	<<
#	  $ rustup toolchain install nightly
#	  $ rustup +nightly target add riscv32imc-unknown-none-elf
#	  $ cargo +nightly install cargo-expand
#	<<
#
#|y-expand:
#|	cargo +nightly expand --features=defmt --example custom-emb

#---
_build:
	$(LOG_ENV) cargo build --release --features=$(FEATURES),defmt --example $(EXAMPLE)
	@test -f ${_OUT_EXAMPLE} || (echo >&2 "Did not produce ${_OUT_EXAMPLE}"; false)

_run:
	probe-rs run --log-format $(DEFMT_HOST_FMT) $(_OUT_EXAMPLE)

echo:
	@echo $(XX)

.PHONY: all custom _build _run echo
