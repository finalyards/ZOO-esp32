[package]
name = "vl53l5cx"
edition = "2021"
rust-version = "1.80"
publish = false

# 'esp-hal' recommends only using 'release'
# Defaults -> https://doc.rust-lang.org/cargo/reference/profiles.html?highlight=incremental#release
[profile.release]
#debug         = "line-tables-only"  # not enough for RTT: << WARN probe_rs::util::rtt: Insufficient DWARF info; compile your program with `debug = 2` to enable location info. <<
debug = 2
#debug-assertions = true     # since we .. kind-of only live in the 'release'
#codegen-units = 1      # LLVM can perform better optimizations using a single thread
codegen-units = 16
opt-level     = "s"     # optimize for binary size, but keep loop vectorization enabled
#panic         = "unwind"    # drops upper scope vars, e.g. stopping an ongoing scan, which may be nice
lto           = "thin"  # "can produce better optimized code, using whole-program analysis, at the cost of longer linking time."
                        #   - thin: "similar to “fat”, but takes substantially less time to run [...]"

[dependencies]
arrayvec        = { version = "0.7.6", default-features = false }   # needed until '[T;N]::try_map()' makes it to stable
defmt           = { version = "0.3.10", optional = true }

esp-hal         = { version = "0.22.0"  , features = ["esp32c3"] }  # "defmt"
#esp-hal         = { version = "0.23.1", features = ["esp32c3"] }     # "defmt"

vl53l5cx_uld    = { path = "../vl53l5cx_uld", features = [] }     # "defmt"

[dev-dependencies]
defmt-rtt       = { version = "0.4.1" }

# esp-hal 0.22.0
#embassy-executor = { version = "0.6.3", features=["task-arena-size-16384"] }
#embassy-sync    = { version = "0.6.2" }
#embassy-time    = { version = "0.3.2", features = ["defmt", "defmt-timestamp-uptime"] }

# latest
embassy-executor = { version = "0.7.0", features=["task-arena-size-16384"] }
    # task area size must be enough for tasks to start
embassy-sync    = { version = "0.6.2" }
embassy-time    = { version = "0.4.0", features = ["defmt", "defmt-timestamp-uptime"] }

# esp-hal 0.22.0
#esp-alloc       = { version = "0.5.0", default-features = false }   # needed by 'single-emb'; see 'init_heap()'
#esp-backtrace   = { version = "0.14.2", features = ["exception-handler", "panic-handler", "defmt", "esp32c3", "semihosting"] }
#esp-hal-embassy = { version = "0.5.0", features = ["defmt", "esp32c3"] }

# latest
esp-alloc       = { version = "0.6.0", default-features = false }   # needed by 'single-emb'; see 'init_heap()'
esp-backtrace   = { version = "0.15.0", features = ["exception-handler", "panic-handler", "defmt", "esp32c3", "semihosting"] }
esp-hal-embassy = { version = "0.6.0", features = ["defmt", "esp32c3"] }

fugit           = { version = "0.3.7" }
static_cell     = { version = "2.1.0" }

[build-dependencies]
anyhow          = "1.0.95"
itertools       = "0.14.0"
serde           = { version = "1.0", features = ["derive"] }
toml            = "0.8.19"

# ULD compile-time features
[features]
ambient_per_spad=   ["vl53l5cx_uld/ambient_per_spad"]
nb_spads_enabled=   ["vl53l5cx_uld/nb_spads_enabled"]
signal_per_spad=    ["vl53l5cx_uld/signal_per_spad"]
range_sigma_mm=     ["vl53l5cx_uld/range_sigma_mm"]
distance_mm=        ["vl53l5cx_uld/distance_mm"]
reflectance_percent= ["vl53l5cx_uld/reflectance_percent"]

# For more than 1 "target per zone":
targets_per_zone_2= ["vl53l5cx_uld/targets_per_zone_2"]
targets_per_zone_3= ["vl53l5cx_uld/targets_per_zone_3"]
targets_per_zone_4= ["vl53l5cx_uld/targets_per_zone_4"]

defmt = ["dep:defmt", "vl53l5cx_uld/defmt", "esp-hal/defmt"]

single = []
flock = []

#R examples_serial = []    #["dep:esp-println"]    # activate output to serial

default = []

#esp-println = []    # EXPERIMENTAL
esp-hal-next = []       # using latest 'main';
#esp-hal-0_22 = []       # DEBUG

# For cases when you need the stack trace.
[profile.dev]
#debug         = "line-tables-only"
debug = 2
debug-assertions = true
opt-level     = "s"     # optimize for binary size, but keep loop vectorization enabled

# Having 'required-features' stops compilation, in case some features wouldn't be declared. However, we also check
# this in the compiles, so having the examples listed here is .. just giving the errors slightly faster.
#
[[example]]
name = "single-emb"
required-features = ["single", "defmt", "distance_mm"]

[[example]]
name = "many-emb"
required-features = ["flock", "defmt", "distance_mm"]

[patch.crates-io]
# also define 'esp-hal-next' feature
esp-backtrace   = { git = "https://github.com/esp-rs/esp-hal.git" }
esp-alloc       = { git = "https://github.com/esp-rs/esp-hal.git" }
esp-hal         = { git = "https://github.com/esp-rs/esp-hal.git" }
esp-hal-embassy = { git = "https://github.com/esp-rs/esp-hal.git" }
