#
# This Makefile is only for help - a wrapper around 'cargo build' to shorten the commands.
#
# Usage:
#	$ [DEFMT_LOG=trace|debug|info|...] [FEATURES=...] make -f Makefile.dev {emb|...}
#		# builds and runs a certain sample
#
DEFMT_LOG?=debug
FEATURES?=

LOG_ENV:=DEFMT_LOG=$(DEFMT_LOG)

DEFMT_HOST_FMT:='{t:dimmed} [{L:bold}] {s}'

REMAKE:=$(MAKE) -f $(MAKEFILE_LIST)

# Read the 'TARGET' from './cargo/config.toml'
#
TARGET:=$(shell cat ../.cargo/config.toml | grep -e '^target\s*=\s"' | cut -d '"' -f2)
	# riscv32imac-unknown-none-elf

# Detect 'cargo' build cache
#
# 'cargo' stores output in a 'target' dir. We get its path via ’build.rs’ to ’.OUT_DIR’. [1]
#
#	[1]: Cargo Book > Build cache
#		https://doc.rust-lang.org/stable/cargo/guide/build-cache.html
#
_OUT_DIR:=.OUT_DIR

# Note! Defined with '=' so that it gets re-evaluated on-site!
_OUT_EXAMPLE=$(shell cat ${_OUT_DIR} | sed -E 's^/build/.+$$^/examples/^')$(EXAMPLE)

all:
	@false

single s:
	EXAMPLE=single-emb \
	  FEATURES=single,distance_mm \
	  $(REMAKE) --no-print-directory _build _run

many m:
	EXAMPLE=many-emb \
	  FEATURES=distance_mm \
	  $(REMAKE) --no-print-directory _build _run

#---
_build:
	$(LOG_ENV) cargo build --release --features=$(FEATURES),defmt --example $(EXAMPLE)
	@test -f ${_OUT_DIR} || (echo >&2 "Did not generate ${_OUT_DIR}"; false)

_run:
	probe-rs run --log-format $(DEFMT_HOST_FMT) $(_OUT_EXAMPLE)

echo:
	@echo $(_OUT_DIR)

.PHONY: all single many _build _run echo
