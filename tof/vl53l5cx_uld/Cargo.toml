[package]
name = "vl53l5cx_uld"   # name matters; shows in the parent 'Cargo.toml'
edition = "2021"
rust-version = "1.80"
    # 1.80: checks for validity of configuration names
    # 1.77.0 provides `cargo::` syntax for build script output instructions
publish = false

# 'esp-hal' recommends only using 'release', so...
# Defaults -> https://doc.rust-lang.org/cargo/reference/profiles.html?highlight=incremental#release
[profile.release]
#debug         = "line-tables-only"  # not enough for RTT: << WARN probe_rs::util::rtt: Insufficient DWARF info; compile your program with `debug = 2` to enable location info. <<
debug = 2
#debug-assertions = true     # since we .. kind-of only live in the 'release'
#codegen-units = 1      # LLVM can perform better optimizations using a single thread
codegen-units = 16
opt-level     = "s"     # optimize for binary size, but keep loop vectorization enabled
panic         = "unwind"    # drops upper scope vars, e.g. stopping an ongoing scan, which may be nice
lto           = "thin"  # "can produce better optimized code, using whole-program analysis, at the cost of longer linking time."
                        #   - thin: "similar to “fat”, but takes substantially less time to run [...]"

[dependencies]
defmt           = { version = "0.3.10", optional = true }
fugit           = { version = "0.3.7", optional = true }
    # available for users of 'esp_hal', but since our ULD layer is MCU agnostic, placing it behind a feature
strum           = { version = "0.26.3", default-features = false, features = ["derive"] }

[dev-dependencies]
anyhow          = { version = "1.0.95", default-features = false }
defmt-rtt       = { version = "0.4.1" }

# last released; I2C GETS STUCK
#esp-backtrace   = { version = "0.15.0", features = ["exception-handler", "panic-handler", "defmt", "esp32c6"] } # "semihosting"
#esp-hal         = { version = "0.23.0", features = ["defmt", "esp32c6"] }

# WORKS!!! MUST USE 0.22.0; I2C gets stuck on 0.23.{01} -> https://github.com/lure23/ZOO-esp32/issues/20
esp-backtrace   = { version = "0.14.2", features = ["exception-handler", "panic-handler", "defmt", "esp32c6"] } # "semihosting"
esp-hal         = { version = "0.22.0", features = ["defmt", "esp32c6"] }

# local copy; I2C GETS STUCK (merged with latest 'main' from esp-rs):
#esp-backtrace   = { path = "../../../esp-hal.bugadani/esp-backtrace", features = ["exception-handler", "panic-handler", "defmt", "esp32c6"] } # "semihosting"
#esp-hal         = { path = "../../../esp-hal.bugadani/esp-hal", features = ["defmt", "esp32c6"] }

# NEXT:
#esp-backtrace   = { git = "https://github.com/esp-rs/esp-hal.git", features = ["exception-handler", "panic-handler", "defmt", "esp32c6"] } # "semihosting"
#esp-hal         = { git = "https://github.com/esp-rs/esp-hal.git", features = ["defmt", "esp32c6"] }

# local copy:
#esp-backtrace   = { path = "../../../esp-hal/esp-backtrace", features = ["exception-handler", "panic-handler", "defmt", "esp32c6"] } # "semihosting"
#esp-hal         = { path = "../../../esp-hal/esp-hal", features = ["defmt", "esp32c6"] }

semihosting     = { version = "0.1.18" }

[build-dependencies]
anyhow          = "1.0.95"
itertools       = "0.14.0"
serde           = { version = "1.0", features = ["derive"] }
toml            = "0.8.19"

# C compile-time features
#
# Note: The names reflect the C side #define's (except for being lower case)
#
# Features define what fields are available in the ranging output. They actually drive the C library compilation.
# More fields means more I2C comms and more code size, so you will benefit from keeping the list tight.
#
# NOTE:
#   Some features are connected to others. We check this in 'build.rs'.
#
[features]
ambient_per_spad=[]     # VL53L5CX_DISABLE_AMBIENT_PER_SPAD
nb_spads_enabled=[]     # VL53L5CX_DISABLE_NB_SPADS_ENABLED
signal_per_spad=[]      # VL53L5CX_DISABLE_SIGNAL_PER_SPAD
range_sigma_mm=[]       # VL53L5CX_DISABLE_RANGE_SIGMA_MM
distance_mm=[]          # VL53L5CX_DISABLE_DISTANCE_MM
reflectance_percent=[]  # VL53L5CX_DISABLE_REFLECTANCE_PERCENT

# Keep always enabled. You need it to know which results are valid.
target_status = []      # VL53L5CX_DISABLED_TARGET_STATUS

# Automatically enabled when having multiple zones.
nb_targets_detected=[]  # VL53L5CX_DISABLE_NB_TARGET_DETECTED

# The code always compiles for at least 1 "target per zone" (how many objects can be detected, in the same conical zone).
# If you want to see more, enable these:
targets_per_zone_2=["nb_targets_detected"]
targets_per_zone_3=["nb_targets_detected"]
targets_per_zone_4=["nb_targets_detected"]

defmt = ["dep:defmt"]
fugit = ["dep:fugit"]

default = ["target_status"]

# Enable if wanting to use 'main' branch; also enable the '[patch.crates-io]' section, below.
esp-hal-next = []
esp-hal-0_22 = []   # 0.22.0

# Having 'required-features' stops compilation, in case some features wouldn't be declared. However, we also check
# this in the compiles, so having the examples listed here is .. just giving the errors slightly faster.
#
[[example]]
name = "m3"
required-features = ["defmt", "fugit", "distance_mm"]   # + "targets_per_zone_{2..4}"

[patch.crates-io]
#|esp-backtrace   = { git = "https://github.com/esp-rs/esp-hal.git" }
#|esp-hal         = { git = "https://github.com/esp-rs/esp-hal.git" }
