/*
* Helper for 'build.rs'
*
* Processes the 'pins.toml', injecting its contents - as Rust include - into the given path.
*
* This is 'include!'ed by 'build.rs', see -> https://doc.rust-lang.org/std/macro.include.html
*/
use anyhow::{Context, Result};
use serde::Deserialize;
use toml;

use std::{
    collections::HashMap,
};

// TOML objects
//
#[derive(Debug, Deserialize)]
struct PinsToml {
    generate: String,
    boards: HashMap<String,Board>
}

#[derive(Debug, Deserialize)]
#[allow(non_snake_case)]
struct Board {
    SDA: u32,
    SCL: u32,
    PWR_EN: Option<u32>,
}

#[allow(non_snake_case)]
fn process_pins(toml: &str, board_id: &str) -> Result<()> {
    let c: PinsToml = toml::from_str(toml)?;

    let board = c.boards.get(board_id).with_context(
        || format!("No section '[boards.{}]' found in 'pins.toml'", board_id)
    )?;

    let filename = &c.generate;
    assert!(filename.len() > 0);

    // unpack, because "field access not supported [...] in a format string"
    let (SDA, SCL, PWR_EN) = (board.SDA, board.SCL, board.PWR_EN);

    let contents = {
        let s_PWR_EN: String = match PWR_EN {
            None => "None" .into(),
            Some(n) => format!("Some(O::new($io.pins.gpio{n}, L::Low))")
        };

        format!(r#"// Generated by 'build.rs' (running 'cargo build').
// DO NOT MAKE CHANGES HERE; THEY WILL GET LOST. Instead, edit 'pins.toml' and rebuild.
//
macro_rules! pins {{
    ($io:ident) => {{{{
        #[allow(unused_imports)]
        use esp_hal::{{ gpio::{{Output as O, Level as L}} }};

        let x: (_, _, Option<O>) = (  // {board_id}
            $io.pins.gpio{SDA},
            $io.pins.gpio{SCL},
            {s_PWR_EN}
        );
        x
    }}}}
}}
"#)
    };

    fs::write(filename, contents).with_context(
        || format!("Unable to write {filename}")
    )?;

    Ok(())
}
