#
# This Makefile is only for help - a wrapper around 'cargo build' to shorten the commands.
#
# Usage:
#	$ [DEFMT_LOG=trace|debug|info|...] [FEATURES=...] make -f Makefile.2 {m3|...}
#		# builds and runs a certain sample
#
DEFMT_LOG?=debug
FEATURES?=

LOG_ENV:=DEFMT_LOG=$(DEFMT_LOG)

DEFMT_HOST_FMT:='{t:dimmed} [{L:bold}] {s}'
DEFMT_FEATURES:=defmt

REMAKE:=$(MAKE) -f $(MAKEFILE_LIST)

# Read the 'TARGET' from './cargo/config.toml'
#
TARGET:=$(shell cat .cargo/config.toml | grep -e '^target\s*=\s"' | cut -d '"' -f2)
	# riscv32imac-unknown-none-elf

all:
	@false

m3:
	EXAMPLE=m3 \
	  FEATURES=targets_per_zone_2,ambient_per_spad,nb_spads_enabled,signal_per_spad,range_sigma_mm,distance_mm,reflectance_percent \
	  $(REMAKE) --no-print-directory _build_run

#---
# Because of how 'target' folder logic is **DEEPLY** embedded in 'cargo' (it can be defined by three ways):
#	<<
#		can set the 'CARGO_TARGET_DIR' environment variable, the 'build.target-dir' config value, or the '--target-dir'
#		command-line flag.
#	<<
# ..it's safest to just play dead and let 'cargo' handle this via its 'runner' mechanism (i.e. we cannot have separate
# '_build' and '_run' targets, and launch 'probe-rs' from here). Unfortunately (also?) we cannot separately ask
# 'cargo run' to "only run". It always also builds.
#
# Note:
#	There is a way to sniff the target folder, by simply having "echo" (or something similar) as the 'runner'.
#	But that would be a hack.
#
_build_run:
	$(LOG_ENV) cargo run --release --features=$(FEATURES),$(DEFMT_FEATURES) --example $(EXAMPLE)

echo:
	@echo a

.PHONY: all m3 _build _run echo
