[package]
name = "vl53l5cx_uld"   # name matters; shows in the parent 'Cargo.toml'
edition = "2021"
rust-version = "1.80"
    # 1.80: checks for validity of configuration names
    # 1.77.0 provides `cargo::` syntax for build script output instructions
publish = false

# Profiles are important (for compilation speed); they deserve to be up here!
#   tbd. should we have profiles in a lib crate?  What is their relationship to a higher one?   Use a workspace?
#
[profile.dev]
opt-level = "z"
# 1: "basic" optimizations
overflow-checks = false     # disable integer overflow checks
panic = "abort"
# Defaults -> https://doc.rust-lang.org/cargo/reference/profiles.html?highlight=incremental#dev

[profile.release]
#debug         = "line-tables-only"
debug = true
#codegen-units = 1      # LLVM can perform better optimizations using a single thread
codegen-units = 32
opt-level     = "s"     # optimize for binary size, but keep loop vectorization enabled
panic = "abort"
lto           = "thin"  # "can produce better optimized code, using whole-program analysis, at the cost of longer linking time."
                        #   - thin: "similar to “fat”, but takes substantially less time to run [...]"
# Defaults -> https://doc.rust-lang.org/cargo/reference/profiles.html?highlight=incremental#release


[dependencies]
defmt           = { version = "0.3.8", optional = true }
strum           = { version = "0.26.3", default-features = false, features = ["derive"] }

[dev-dependencies]
assert_cfg      = "0.1.0"
defmt           = { version = "0.3.8" }
defmt-rtt       = { version = "0.4.1" }
esp-backtrace   = { version = "0.13.0", features = ["exception-handler", "panic-handler", "defmt", "esp32c3"] }
esp-hal         = { version = "0.19.0", features = ["async", "defmt", "esp32c3"] }
#esp-hal-smartled    = { version = "0.11.0", features = ["esp32c3"] }
static_cell     = { version = "2.1.0" }

[build-dependencies]
esp-build = "0.1.0"
itertools = "0.13.0"

# C compile-time features
#
# Note: The names reflect the C side #define's (except for being lower case)
#
# Features define what fields are available in the ranging output. They actually drive the C library compilation.
# More fields means more I2C comms and more code size, so you will benefit from keeping the list tight.
#
# NOTE:
#   Some features are connected to others. We check this in 'build.rs'.
#
[features]
ambient_per_spad=[]     # VL53L5CX_DISABLE_AMBIENT_PER_SPAD
nb_spads_enabled=[]     # VL53L5CX_DISABLE_NB_SPADS_ENABLED
signal_per_spad=[]      # VL53L5CX_DISABLE_SIGNAL_PER_SPAD
range_sigma_mm=[]       # VL53L5CX_DISABLE_RANGE_SIGMA_MM
distance_mm=[]          # VL53L5CX_DISABLE_DISTANCE_MM
reflectance_percent=[]  # VL53L5CX_DISABLE_REFLECTANCE_PERCENT
motion_indicator=[]     # VL53L5CX_DISABLE_MOTION_INDICATOR

# Raw (firmware) format: raw numbers, "provides better accuracy".
use_raw_format=[]       # VL53L5CX_USE_RAW_FORMAT

targets_per_zone_1=[]
#targets_per_zone_2=[]
#targets_per_zone_3=[]
#targets_per_zone_4=[]

defmt = [
    "dep:defmt"
]

default = ["targets_per_zone_1"]
